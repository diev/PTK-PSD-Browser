using Microsoft.EntityFrameworkCore;

using PTK_PSD_Browser.Core.ELODB;

#nullable disable

namespace PTK_PSD_Browser.Core.Data
{
    public partial class ELODBContext : DbContext
    {
        #region Autogenerated
        public ELODBContext()
        {
        }

        public ELODBContext(DbContextOptions<ELODBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<EloArhPost> EloArhPosts { get; set; }
        public virtual DbSet<EloBnk> EloBnks { get; set; }
        public virtual DbSet<EloFinDatal> EloFinDatals { get; set; }
        public virtual DbSet<EloFinDatam> EloFinDatams { get; set; }
        public virtual DbSet<EloFrmStatus> EloFrmStatuses { get; set; }
        public virtual DbSet<EloMailCfg> EloMailCfgs { get; set; }
        public virtual DbSet<EloMainReport> EloMainReports { get; set; }
        public virtual DbSet<EloModify> EloModifies { get; set; }
        public virtual DbSet<EloOkud> EloOkuds { get; set; }
        public virtual DbSet<EloPath> EloPaths { get; set; }
        public virtual DbSet<EloSprBik> EloSprBiks { get; set; }
        public virtual DbSet<EloSprErr> EloSprErrs { get; set; }
        public virtual DbSet<EloSprPost> EloSprPosts { get; set; }
        public virtual DbSet<EloSprPostSub> EloSprPostSubs { get; set; }
        public virtual DbSet<EloSprState> EloSprStates { get; set; }
        public virtual DbSet<EloStructRoot> EloStructRoots { get; set; }
        public virtual DbSet<EloTable> EloTables { get; set; }
        public virtual DbSet<EloTypeDoc> EloTypeDocs { get; set; }
        public virtual DbSet<EloUser> EloUsers { get; set; }
        public virtual DbSet<EloUserJob> EloUserJobs { get; set; }
        public virtual DbSet<EloUsersAccess> EloUsersAccesses { get; set; }
        public virtual DbSet<EloUsrErr> EloUsrErrs { get; set; }
        public virtual DbSet<EloUsrProtocol> EloUsrProtocols { get; set; }
        public virtual DbSet<LdvAddInfo> LdvAddInfos { get; set; }
        public virtual DbSet<LdvFinAppl> LdvFinAppls { get; set; }
        public virtual DbSet<LdvFinColumn> LdvFinColumns { get; set; }
        public virtual DbSet<LdvFinConstl> LdvFinConstls { get; set; }
        public virtual DbSet<LdvFinDatal> LdvFinDatals { get; set; }
        public virtual DbSet<LdvFinHeader> LdvFinHeaders { get; set; }
        public virtual DbSet<LdvFinRefr> LdvFinRefrs { get; set; }
        public virtual DbSet<LdvFinString> LdvFinStrings { get; set; }
        public virtual DbSet<LdvLogctrlCode> LdvLogctrlCodes { get; set; }
        public virtual DbSet<LdvLogctrlDatum> LdvLogctrlData { get; set; }
        public virtual DbSet<SvsprApr> SvsprAprs { get; set; }
        public virtual DbSet<WtElodbLog> WtElodbLogs { get; set; }
        #endregion Autogenerated

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //#warning
                //To protect potentially sensitive information in your connection string,
                //you should move it out of source code.
                //You can avoid scaffolding the connection string by using the Name= syntax to read
                //it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148.
                //For more guidance on storing connection strings,
                //see http://go.microsoft.com/fwlink/?LinkId=723263.

                optionsBuilder.UseSqlServer(QueryDatabase.ConnectionString);
            }
        }

        #region Autogenerated
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS");

            modelBuilder.Entity<EloArhPost>(entity =>
            {
                entity.HasKey(e => new { e.Filetype, e.Posttype, e.Dt, e.Filename, e.State, e.Bik, e.Nkod })
                    .HasName("ELO_ARH_POST_PK");

                entity.ToTable("ELO_ARH_POST");

                entity.HasIndex(e => new { e.Dt, e.Filename }, "ELO_ARH_POST_DT");

                entity.Property(e => e.Filetype)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FILETYPE");

                entity.Property(e => e.Posttype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("POSTTYPE");

                entity.Property(e => e.Dt)
                    .HasColumnType("datetime")
                    .HasColumnName("DT");

                entity.Property(e => e.Filename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FILENAME");

                entity.Property(e => e.State)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("STATE_");

                entity.Property(e => e.Bik)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("BIK");

                entity.Property(e => e.Nkod)
                    .HasColumnType("numeric(5, 0)")
                    .HasColumnName("NKOD");

                entity.Property(e => e.AddInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADD_INFO");

                entity.Property(e => e.DtCreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CREATE");

                entity.Property(e => e.Error)
                    .HasColumnType("numeric(5, 0)")
                    .HasColumnName("ERROR_");

                entity.Property(e => e.FesType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fes_type");

                entity.Property(e => e.Guid)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("GUID_");

                entity.Property(e => e.Katype)
                    .HasColumnType("numeric(5, 0)")
                    .HasColumnName("katype");

                entity.Property(e => e.OnGuid)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ON_GUID_");

                entity.Property(e => e.Pathname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PATHNAME");

                entity.Property(e => e.Repdate)
                    .HasColumnType("datetime")
                    .HasColumnName("REPDATE");
            });

            modelBuilder.Entity<EloBnk>(entity =>
            {
                entity.HasKey(e => e.Bik)
                    .HasName("ELO_BNK_PK");

                entity.ToTable("ELO_BNK");

                entity.Property(e => e.Bik)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("BIK");

                entity.Property(e => e.Addr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADDR");

                entity.Property(e => e.BnkPzn)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("BNK_PZN");

                entity.Property(e => e.Fname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FNAME");

                entity.Property(e => e.LinkBik)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("LINK_BIK");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("OGRN");

                entity.Property(e => e.Okato)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("OKATO");

                entity.Property(e => e.Okpo)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("OKPO");

                entity.Property(e => e.OrgHead)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ORG_HEAD");

                entity.Property(e => e.RealBik)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("REAL_BIK");

                entity.Property(e => e.Regnom)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("REGNOM");
            });

            modelBuilder.Entity<EloFinDatal>(entity =>
            {
                entity.HasKey(e => new { e.Bik, e.Date, e.Code, e.Strcode, e.Colcode, e.KeyR })
                    .HasName("ELO_FIN_DATAL_PK");

                entity.ToTable("ELO_FIN_DATAL");

                entity.Property(e => e.Bik)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("BIK");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Strcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STRCODE");

                entity.Property(e => e.Colcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COLCODE");

                entity.Property(e => e.KeyR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KEY_R");

                entity.Property(e => e.Val)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("VAL");
            });

            modelBuilder.Entity<EloFinDatam>(entity =>
            {
                entity.HasKey(e => new { e.Bik, e.Date, e.Code, e.Strcode, e.Colcode, e.KeyR })
                    .HasName("ELO_FIN_DATAM_PK");

                entity.ToTable("ELO_FIN_DATAM");

                entity.Property(e => e.Bik)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("BIK");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Strcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STRCODE");

                entity.Property(e => e.Colcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COLCODE");

                entity.Property(e => e.KeyR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KEY_R");

                entity.Property(e => e.Val)
                    .HasColumnType("text")
                    .HasColumnName("VAL");
            });

            modelBuilder.Entity<EloFrmStatus>(entity =>
            {
                entity.HasKey(e => new { e.Tdate, e.Bik, e.Frmname })
                    .HasName("ELO_FRM_STATUS_PK");

                entity.ToTable("ELO_FRM_STATUS");

                entity.Property(e => e.Tdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TDATE");

                entity.Property(e => e.Bik)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("BIK");

                entity.Property(e => e.Frmname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FRMNAME");

                entity.Property(e => e.Frmstatus)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("FRMSTATUS");

                entity.Property(e => e.Mdate)
                    .HasColumnType("datetime")
                    .HasColumnName("MDATE");

                entity.Property(e => e.Poststatus)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("POSTSTATUS");
            });

            modelBuilder.Entity<EloMailCfg>(entity =>
            {
                entity.HasKey(e => e.Mail)
                    .HasName("ELO_MAIL_CFG_PK");

                entity.ToTable("ELO_MAIL_CFG");

                entity.Property(e => e.Mail)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MAIL");

                entity.Property(e => e.Mfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MFO");
            });

            modelBuilder.Entity<EloMainReport>(entity =>
            {
                entity.HasKey(e => e.KodOt)
                    .HasName("ELO_MAIN_REPORT_PK");

                entity.ToTable("ELO_MAIN_REPORT");

                entity.Property(e => e.KodOt)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("KOD_OT");

                entity.Property(e => e.NameOt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NAME_OT");
            });

            modelBuilder.Entity<EloModify>(entity =>
            {
                entity.HasKey(e => new { e.Verclient, e.Vermeta, e.Date })
                    .HasName("ELO_MODIFY_PK");

                entity.ToTable("ELO_MODIFY");

                entity.Property(e => e.Verclient)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("VERCLIENT");

                entity.Property(e => e.Vermeta)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VERMETA");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_");
            });

            modelBuilder.Entity<EloOkud>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ELO_OKUD");

                entity.Property(e => e.IdIsp)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("ID_ISP");

                entity.Property(e => e.KodOtExt)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("KOD_OT_EXT");

                entity.Property(e => e.KodPril)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("KOD_PRIL");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NAME_");

                entity.Property(e => e.Okud)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("OKUD");

                entity.Property(e => e.Scode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SCODE");
            });

            modelBuilder.Entity<EloPath>(entity =>
            {
                entity.HasKey(e => new { e.PathId, e.Ecp })
                    .HasName("ELO_PATH_PK");

                entity.ToTable("ELO_PATH");

                entity.Property(e => e.PathId)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("PATH_ID");

                entity.Property(e => e.Ecp)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ECP");

                entity.Property(e => e.Enable)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("ENABLE_");

                entity.Property(e => e.PathDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PATH_DESC");

                entity.Property(e => e.PathIn)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("PATH_IN");

                entity.Property(e => e.PathOut)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("PATH_OUT");
            });

            modelBuilder.Entity<EloSprBik>(entity =>
            {
                entity.HasKey(e => new { e.Posttype, e.Bik })
                    .HasName("ELO_SPR_BIK_PK");

                entity.ToTable("ELO_SPR_BIK");

                entity.Property(e => e.Posttype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("POSTTYPE");

                entity.Property(e => e.Bik)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("BIK");
            });

            modelBuilder.Entity<EloSprErr>(entity =>
            {
                entity.HasKey(e => e.Errcod)
                    .HasName("ELO_SPR_ERR_PK");

                entity.ToTable("ELO_SPR_ERR");

                entity.Property(e => e.Errcod)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("ERRCOD");

                entity.Property(e => e.Errtext)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ERRTEXT");

                entity.Property(e => e.Errtextout)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ERRTEXTOUT");
            });

            modelBuilder.Entity<EloSprPost>(entity =>
            {
                entity.HasKey(e => e.Posttype)
                    .HasName("ELO_SPR_POST_PK");

                entity.ToTable("ELO_SPR_POST");

                entity.Property(e => e.Posttype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("POSTTYPE");

                entity.Property(e => e.Datatype)
                    .HasColumnType("numeric(1, 0)")
                    .HasColumnName("DATATYPE");

                entity.Property(e => e.Dtype)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("DTYPE");

                entity.Property(e => e.Enable)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("ENABLE_");

                entity.Property(e => e.KodOt)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("KOD_OT");

                entity.Property(e => e.PathId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("PATH_ID");

                entity.Property(e => e.PathSet)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("PATH_SET");

                entity.Property(e => e.Postname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POSTNAME");

                entity.Property(e => e.SetEcpAuto)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("SET_ECP_AUTO");

                entity.Property(e => e.VerElo)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("VER_ELO");
            });

            modelBuilder.Entity<EloSprPostSub>(entity =>
            {
                entity.HasKey(e => new { e.Posttype, e.Code })
                    .HasName("ELO_SPR_POST_SUB_PK");

                entity.ToTable("ELO_SPR_POST_SUB");

                entity.Property(e => e.Posttype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("POSTTYPE");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.KodOt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KOD_OT");
            });

            modelBuilder.Entity<EloSprState>(entity =>
            {
                entity.HasKey(e => e.KotSt)
                    .HasName("ELO_SPR_STATE_PK");

                entity.ToTable("ELO_SPR_STATE");

                entity.Property(e => e.KotSt)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("KOT_ST");

                entity.Property(e => e.NameSt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NAME_ST");
            });

            modelBuilder.Entity<EloStructRoot>(entity =>
            {
                entity.HasKey(e => e.Scode)
                    .HasName("ELO_STRUCT_ROOT_PK");

                entity.ToTable("ELO_STRUCT_ROOT");

                entity.Property(e => e.Scode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SCODE");

                entity.Property(e => e.Sarr)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SARR");

                entity.Property(e => e.Sbgm)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SBGM");

                entity.Property(e => e.Sdesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SDESC");

                entity.Property(e => e.Sgis)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("SGIS");

                entity.Property(e => e.Skol)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("SKOL");

                entity.Property(e => e.Sparam)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SPARAM");
            });

            modelBuilder.Entity<EloTable>(entity =>
            {
                entity.HasKey(e => e.Tablename)
                    .HasName("ELO_TABLES_PK");

                entity.ToTable("ELO_TABLES");

                entity.Property(e => e.Tablename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TABLENAME");

                entity.Property(e => e.Ops)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OPS");

                entity.Property(e => e.Pr)
                    .HasColumnType("numeric(1, 0)")
                    .HasColumnName("PR");
            });

            modelBuilder.Entity<EloTypeDoc>(entity =>
            {
                entity.HasKey(e => e.PtypeId)
                    .HasName("ELO_TYPE_DOC_PK");

                entity.ToTable("ELO_TYPE_DOC");

                entity.Property(e => e.PtypeId)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("PTYPE_ID");

                entity.Property(e => e.PtypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PTYPE_NAME");
            });

            modelBuilder.Entity<EloUser>(entity =>
            {
                entity.HasKey(e => e.Usrid)
                    .HasName("ELO_USERS_PK");

                entity.ToTable("ELO_USERS");

                entity.Property(e => e.Usrid)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("USRID");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_");

                entity.Property(e => e.IbdArx)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("IBD_ARX");

                entity.Property(e => e.Usrname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USRNAME");

                entity.Property(e => e.Usrpwd)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USRPWD");
            });

            modelBuilder.Entity<EloUserJob>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.Jobid })
                    .HasName("ELO_USER_JOB_PK");

                entity.ToTable("ELO_USER_JOB");

                entity.Property(e => e.Userid)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("USERID");

                entity.Property(e => e.Jobid)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("JOBID");

                entity.Property(e => e.Dostup)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("DOSTUP");

                entity.Property(e => e.Jobname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOBNAME");
            });

            modelBuilder.Entity<EloUsersAccess>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.Formname })
                    .HasName("ELO_USERS_ACCESS_PK");

                entity.ToTable("ELO_USERS_ACCESS");

                entity.Property(e => e.Userid)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("USERID");

                entity.Property(e => e.Formname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FORMNAME");

                entity.Property(e => e.Dd)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("DD");

                entity.Property(e => e.Di)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("DI");

                entity.Property(e => e.Ds)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("DS");
            });

            modelBuilder.Entity<EloUsrErr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ELO_USR_ERR");

                entity.Property(e => e.Errcod)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("ERRCOD");

                entity.Property(e => e.Errtext)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ERRTEXT");

                entity.Property(e => e.Modul)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MODUL");

                entity.Property(e => e.Time)
                    .HasColumnType("datetime")
                    .HasColumnName("TIME_");

                entity.Property(e => e.Userid)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<EloUsrProtocol>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ELO_USR_PROTOCOL");

                entity.Property(e => e.Bik)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("BIK");

                entity.Property(e => e.Job)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("JOB_");

                entity.Property(e => e.Modul)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MODUL");

                entity.Property(e => e.Object)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("OBJECT_");

                entity.Property(e => e.Time)
                    .HasColumnType("datetime")
                    .HasColumnName("TIME_");

                entity.Property(e => e.Userid)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<LdvAddInfo>(entity =>
            {
                entity.HasKey(e => new { e.Unicode, e.Code })
                    .HasName("LDV_ADD_INFO_PK");

                entity.ToTable("LDV_ADD_INFO");

                entity.Property(e => e.Unicode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNICODE");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Vol)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VOL");
            });

            modelBuilder.Entity<LdvFinAppl>(entity =>
            {
                entity.HasKey(e => new { e.Code, e.BDate })
                    .HasName("LDV_FIN_APPL_PK");

                entity.ToTable("LDV_FIN_APPL");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.BDate)
                    .HasColumnType("datetime")
                    .HasColumnName("B_DATE");

                entity.Property(e => e.AddInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADD_INFO");

                entity.Property(e => e.Anumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ANUMBER");

                entity.Property(e => e.Atype)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("ATYPE");

                entity.Property(e => e.Dwsyntax)
                    .HasColumnType("text")
                    .HasColumnName("DWSYNTAX");

                entity.Property(e => e.KodOt)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KOD_OT");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Nform)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NFORM");

                entity.Property(e => e.Reglament)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("REGLAMENT");
            });

            modelBuilder.Entity<LdvFinColumn>(entity =>
            {
                entity.HasKey(e => new { e.Code, e.Colcode, e.BDate })
                    .HasName("LDV_FIN_COLUMN_PK");

                entity.ToTable("LDV_FIN_COLUMN");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Colcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("COLCODE");

                entity.Property(e => e.BDate)
                    .HasColumnType("datetime")
                    .HasColumnName("B_DATE");

                entity.Property(e => e.AddInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADD_INFO");

                entity.Property(e => e.Alignment)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("ALIGNMENT");

                entity.Property(e => e.Aorder)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("AORDER");

                entity.Property(e => e.Arrcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ARRCODE");

                entity.Property(e => e.Atype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ATYPE");

                entity.Property(e => e.Autoheight)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("AUTOHEIGHT");

                entity.Property(e => e.Format)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FORMAT");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NAME");
            });

            modelBuilder.Entity<LdvFinConstl>(entity =>
            {
                entity.HasKey(e => new { e.Code, e.Strcode, e.BDate, e.KeyR })
                    .HasName("LDV_FIN_CONSTL_PK");

                entity.ToTable("LDV_FIN_CONSTL");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Strcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STRCODE");

                entity.Property(e => e.BDate)
                    .HasColumnType("datetime")
                    .HasColumnName("B_DATE");

                entity.Property(e => e.KeyR)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KEY_R");

                entity.Property(e => e.Val)
                    .HasColumnType("text")
                    .HasColumnName("VAL");
            });

            modelBuilder.Entity<LdvFinDatal>(entity =>
            {
                entity.HasKey(e => new { e.Bik, e.Date, e.Code, e.KeyR, e.Strcode })
                    .HasName("LDV_FIN_DATAL_PK");

                entity.ToTable("LDV_FIN_DATAL");

                entity.HasIndex(e => e.Code, "LDV_FIN_DATAL_CODE_IDX")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bik)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("BIK");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.KeyR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KEY_R");

                entity.Property(e => e.Strcode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STRCODE");

                entity.Property(e => e.Val)
                    .HasColumnType("text")
                    .HasColumnName("VAL");
            });

            modelBuilder.Entity<LdvFinHeader>(entity =>
            {
                entity.HasKey(e => new { e.Code, e.Strcode, e.BDate })
                    .HasName("LDV_FIN_HEADER_PK");

                entity.ToTable("LDV_FIN_HEADER");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Strcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STRCODE");

                entity.Property(e => e.BDate)
                    .HasColumnType("datetime")
                    .HasColumnName("B_DATE");

                entity.Property(e => e.KeyR)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KEY_R");

                entity.Property(e => e.Val)
                    .HasColumnType("text")
                    .HasColumnName("VAL");
            });

            modelBuilder.Entity<LdvFinRefr>(entity =>
            {
                entity.HasKey(e => new { e.Bik, e.Date, e.Code, e.KeyR, e.Strcode })
                    .HasName("LDV_FIN_REFR_PK");

                entity.ToTable("LDV_FIN_REFR");

                entity.HasIndex(e => e.Code, "LDV_FIN_REFR_CODE_IDX")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bik)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("BIK");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.KeyR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KEY_R");

                entity.Property(e => e.Strcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("STRCODE");

                entity.Property(e => e.Val)
                    .HasColumnType("text")
                    .HasColumnName("VAL");
            });

            modelBuilder.Entity<LdvFinString>(entity =>
            {
                entity.HasKey(e => new { e.Code, e.Strcode, e.BDate })
                    .HasName("LDV_FIN_STRING_PK");

                entity.ToTable("LDV_FIN_STRING");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Strcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STRCODE");

                entity.Property(e => e.BDate)
                    .HasColumnType("datetime")
                    .HasColumnName("B_DATE");

                entity.Property(e => e.AddInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADD_INFO");

                entity.Property(e => e.Aorder)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("AORDER");

                entity.Property(e => e.Arrcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ARRCODE");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Refr)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("REFR");
            });

            modelBuilder.Entity<LdvLogctrlCode>(entity =>
            {
                entity.HasKey(e => e.Ccode)
                    .HasName("LDV_LOGCTRL_CODE_PK");

                entity.ToTable("LDV_LOGCTRL_CODE");

                entity.Property(e => e.Ccode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CCODE");

                entity.Property(e => e.Cdesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CDESC");
            });

            modelBuilder.Entity<LdvLogctrlDatum>(entity =>
            {
                entity.HasKey(e => new { e.Ccode, e.Scode, e.BDate })
                    .HasName("LDV_LOGCTRL_DATA_PK");

                entity.ToTable("LDV_LOGCTRL_DATA");

                entity.Property(e => e.Ccode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CCODE");

                entity.Property(e => e.Scode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SCODE");

                entity.Property(e => e.BDate)
                    .HasColumnType("datetime")
                    .HasColumnName("B_DATE");

                entity.Property(e => e.AddInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADD_INFO");

                entity.Property(e => e.Calculate)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("CALCULATE");

                entity.Property(e => e.Deactivate)
                    .HasColumnType("numeric(6, 0)")
                    .HasColumnName("DEACTIVATE");

                entity.Property(e => e.Form)
                    .HasColumnType("text")
                    .HasColumnName("FORM");

                entity.Property(e => e.Sdesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SDESC");
            });

            modelBuilder.Entity<SvsprApr>(entity =>
            {
                entity.HasKey(e => new { e.Bs2, e.Open, e.Dopen })
                    .HasName("SVSPR_APR_PK");

                entity.ToTable("SVSPR_APR");

                entity.Property(e => e.Bs2)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("BS2");

                entity.Property(e => e.Open)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("OPEN_");

                entity.Property(e => e.Dopen)
                    .HasColumnType("datetime")
                    .HasColumnName("DOPEN");

                entity.Property(e => e.Ap)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("AP");

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AREA");

                entity.Property(e => e.Bs1)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BS1");

                entity.Property(e => e.Comments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Dclose)
                    .HasColumnType("datetime")
                    .HasColumnName("DCLOSE");

                entity.Property(e => e.Naim)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NAIM");

                entity.Property(e => e.Part)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("PART");
            });

            modelBuilder.Entity<WtElodbLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wt_elodb_log");

                entity.Property(e => e.CreateUser)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("create_user");

                entity.Property(e => e.CreateUserDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_user_date");

                entity.Property(e => e.RecId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("rec_id");

                entity.Property(e => e.UserAction)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("user_action");

                entity.Property(e => e.Val)
                    .HasColumnType("text")
                    .HasColumnName("val");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
        #endregion Autogenerated
    }
}
